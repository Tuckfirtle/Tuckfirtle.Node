// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tuckfirtle.Node.Database;

namespace Tuckfirtle.Node.Migrations
{
    [DbContext(typeof(SqliteDatabaseContext))]
    [Migration("20200916160323_0.0.1")]
    partial class _001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8");

            modelBuilder.Entity("Tuckfirtle.Node.Database.Table.Block", b =>
                {
                    b.Property<string>("BlockHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NetworkIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nonce")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetDifficulty")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("BlockHash");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Tuckfirtle.Node.Database.Table.Peer", b =>
                {
                    b.Property<Guid>("PeerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("INTEGER");

                    b.HasKey("PeerId");

                    b.ToTable("Peers");
                });

            modelBuilder.Entity("Tuckfirtle.Node.Database.Table.Transaction", b =>
                {
                    b.Property<string>("TransactionHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockHash1")
                        .HasColumnType("TEXT");

                    b.Property<long>("Timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransactionHash");

                    b.HasIndex("BlockHash1");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Tuckfirtle.Node.Database.Table.TransactionInput", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScriptName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScriptValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionHash1")
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionOutputIndex")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TransactionHash1");

                    b.ToTable("TransactionInputs");
                });

            modelBuilder.Entity("Tuckfirtle.Node.Database.Table.TransactionOutput", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScriptName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScriptValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionHash1")
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionOutputIndex")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TransactionHash1");

                    b.ToTable("TransactionOutputs");
                });

            modelBuilder.Entity("Tuckfirtle.Node.Database.Table.Transaction", b =>
                {
                    b.HasOne("Tuckfirtle.Node.Database.Table.Block", null)
                        .WithMany("Transactions")
                        .HasForeignKey("BlockHash1");
                });

            modelBuilder.Entity("Tuckfirtle.Node.Database.Table.TransactionInput", b =>
                {
                    b.HasOne("Tuckfirtle.Node.Database.Table.Transaction", null)
                        .WithMany("TransactionInputs")
                        .HasForeignKey("TransactionHash1");
                });

            modelBuilder.Entity("Tuckfirtle.Node.Database.Table.TransactionOutput", b =>
                {
                    b.HasOne("Tuckfirtle.Node.Database.Table.Transaction", null)
                        .WithMany("TransactionOutputs")
                        .HasForeignKey("TransactionHash1");
                });
#pragma warning restore 612, 618
        }
    }
}
